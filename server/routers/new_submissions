// TCP Sockets
const net = require('net')

// You may not need this if you already have the zip as a buffer of bytes -- I just loaded a test file with this
const fs = require('fs')

// This is a byte array - buffer - of the zip file
const data = fs.readFileSync('README.md')

// This is how you call the function - send the zip file as a byte array and the file name which includes team name submission number and language
SendZipFile(data, 'team1_submission1_java.zip')

function SendZipFile (zipBytes, fileName) { // Function definition
  const ARENA_HOST_IP = '192.168.0.13' // I will give you this the day of the competition
  const ARENA_HOST_PORT = 21 // This should stay the same
  const WEB_SERVER_ZIP_FILE_IP = '127.0.0.1' // This will not normally be the same as ARENA_HOST_IP - it will be where the web server is sending the zip file from. Your IP.
  const WEB_SERVER_ZIP_FILE_PORT = 300 // Can be anything but I have mine set to 300 right now.

  const server = net.createServer() // You are creating a server on port 300 to send me the zip file.

  server.on('connection', function (sock) {
    // When I connect just send me the file and then immediately destory the connection.
    console.log('Server listening on ' + server.address().address + ':' + server.address().port)
    console.log('CONNECTED: ' + sock.remoteAddress + ':' + sock.remotePort)
    // other stuff is the same from here
    sock.write(zipBytes)
    sock.destroy()
  })

  const client = new net.Socket()
  client.connect(ARENA_HOST_PORT, ARENA_HOST_IP, async function () { // Connect to Arena
    console.log('CONNECTED TO: ' + ARENA_HOST_IP + ':' + ARENA_HOST_PORT)
  })
  // Add a 'data' event handler for the client socket
  // data is what the server sent to this socket
  client.on('data', function (data) { // When I send you data write it to the console and send me an appropriate response.
    console.log('DATA: ' + data)
    if (data.includes('Service Ready')) {
      client.write('USER Guest\n') // Username
    } else if (data.includes('need password')) {
      client.write('PASS \n') // Password is nothing right now
    } else if (data.includes('logged in')) {
      client.write('EPRT |1|127.0.0.1|300|\n') // Tells me how you will send file.
      server.listen(WEB_SERVER_ZIP_FILE_PORT, WEB_SERVER_ZIP_FILE_IP) // Start listening for me to connect.
    } else if (data.includes('Connection Established')) {
      client.write('TYPE I\n') // Tell me its a stream of bytes
    } else if (data.includes('Type set')) {
      client.write('STOR ' + fileName + '\n') // Tell me the file name.
    } else if (data.includes('Closing data')) { // When this is sent I have successfully received file.
      server.close() // Close connection.
      client.write('QUIT 221')
      client.destroy() // Close the client socket completely
    }
  })
  // Add a 'close' event handler for the client socket
  client.on('close', function () {
    console.log('Connection closed')
  })
}
